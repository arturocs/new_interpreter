fn test_function_equality() {
    assert_eq(|| {}, || {})
}

fn test_double_if(){
    a = 13
    b = if if a == 13 { 10 } else { 0 } > 5 {
        true
    }
    assert(b)
}

fn test_recursion() {
    fib = |n| if n ==1 or n==2 {
        1
    } else {
        fib(n - 1) + fib(n - 2)
    }
    
    assert_eq(fib(10), 55)
}

fn test_import(){
    tests = import("tests/test_import_functions")
    assert_eq(tests.importable_fn(), 1)
}

fn test_import_repeated_function(){
    tests = import("tests/test_import_functions")
    assert_eq(tests.duplicated_fn(), 2)

}

fn test_function_with_optional_args(){
    f = |a,b=1,c=2| a+b+c
    assert_eq(f(1), 4)
    assert_eq(f(1,2), 5)
    assert_eq(f(1,2,3), 6)
}

fn test_format_function() {
    f = |a,b=1,c=2| a+b+c
    assert_eq(f"{f}", "|a, b = 1, c = 2| a + b + c")
}

fn test_slice(){
    a = [1,2,3,4,5,6,7,8,9,10]
    assert_eq(a.slice(1,5), [2,3,4,5])
}

fn test_type(){
    assert_eq(type(1), "Int")
    assert_eq(type(1.0), "Float")
    assert_eq(type("1"), "Str")
    assert_eq(type([]), "Vec")
    assert_eq(type({}), "Dict")
    assert_eq(type(|| ()), "Func")
    assert_eq(type(true), "Bool")
    assert_eq(type(false), "Bool")
    assert_eq(type(None), "None")
    assert_eq(type(range(1)), "Iterator")
    assert_eq(type(max), "NativeFunc")
    assert_eq(type(err()), "Error")

}

fn test_catch_error(){
    a = catch_err(|| 1/0)
    assert(a == err("Cannot divide by zero"))
}

fn test_eval(){
    a = eval("1+1")
    assert_eq(a, 2)
}

fn test_rand() {
    a = rand(1, 10)
    assert(a >= 1 and a <= 10)
}

fn test_rand_float() {
    a = rand_float(-0.5, 0.5)
    assert(a >= -0.5 and a <= 0.5)
}
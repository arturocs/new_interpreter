fn test_range_sum() {
    assert_eq(range(0,10).sum(), 45)
}

fn test_range_for_each() {
    a = 0
    range(0,10).for_each(|i| a += i)
    assert_eq(a, 45)
}



fn test_flatten() {
    a = [[1,2],[3,4]].flatten().to_vec()
    assert_eq(a, [1,2,3,4])
}

fn test_flatmap() {
    a = [[1,2],[3,4]].flat_map(|i| i*2).to_vec()
    assert_eq(a, [2,4,6,8])
}

fn test_map() {
    a = [1,2,3,4].map(|i| i*2).to_vec()
    assert_eq(a, [2,4,6,8])
}

fn test_filter() {
    a = [1,2,3,4,5].filter(|i| i % 2 == 0).to_vec()
    assert_eq(a, [2,4])
}

fn test_filter_map() {
    a=[1,2,3,4,5].filter(|i| i % 2 == 0).map(|i| i * 2).to_vec()
    assert_eq(a, [4,8])
}

fn test_filter_sort_by() {
    a = [1, 2, 3, 4].filter(|i| i % 2 == 0).to_vec().sort_by(|a| -a)
    assert_eq(a, [4, 2])
}

fn test_enumerate() {
    a = [1,2,3,4].enumerate().to_vec()
    assert_eq(a, [[0,1],[1,2],[2,3],[3,4]])

}

fn test_zip() {
    a = [1,2,3,4].zip([5,6,7,8]).to_vec()
    assert_eq(a, [[1,5],[2,6],[3,7],[4,8]])

}

fn test_skip() {
    a = [1,2,3,4].skip(2).to_vec()
    assert_eq(a, [3,4])
}

fn test_take() {
    a = [1,2,3,4].take(2).to_vec()
    assert_eq(a, [1,2])
}

fn test_step_by() {
    a = [1,2,3,4,5,6,7,8,9,10].step_by(2).to_vec()
    assert_eq(a, [1,3,5,7,9])
}

fn test_generator(){
    i=0
    g = generator(|| {
        if i < 10 {
            i += 1
            i
        } else {
            err()
        }
    })

    assert_eq(g.to_vec(), [1,2,3,4,5,6,7,8,9,10])
}